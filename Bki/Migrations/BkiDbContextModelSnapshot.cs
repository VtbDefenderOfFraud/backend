// <auto-generated />
using System;
using Bki.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bki.Migrations
{
    [DbContext(typeof(BkiDbContext))]
    partial class BkiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bki.Model.Data.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 5, 15, 22, 14, 25, 51, DateTimeKind.Local).AddTicks(9209),
                            Name = "МФО \"Копеечка онлайн\""
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 5, 15, 22, 14, 25, 53, DateTimeKind.Local).AddTicks(106),
                            Name = "СберБанк"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 5, 15, 22, 14, 25, 53, DateTimeKind.Local).AddTicks(116),
                            Name = "Тинькофф"
                        });
                });

            modelBuilder.Entity("Bki.Model.Data.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("Passport");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("EntityFrameworkCore.MemoryJoin.QueryModelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime2")
                        .HasColumnName("date1");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime2")
                        .HasColumnName("date2");

                    b.Property<DateTime?>("Date3")
                        .HasColumnType("datetime2")
                        .HasColumnName("date3");

                    b.Property<double?>("Double1")
                        .HasColumnType("float")
                        .HasColumnName("double1");

                    b.Property<double?>("Double2")
                        .HasColumnType("float")
                        .HasColumnName("double2");

                    b.Property<double?>("Double3")
                        .HasColumnType("float")
                        .HasColumnName("double3");

                    b.Property<Guid?>("Guid1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid1");

                    b.Property<Guid?>("Guid2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid2");

                    b.Property<Guid?>("Guid3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid3");

                    b.Property<long?>("Long1")
                        .HasColumnType("bigint")
                        .HasColumnName("long1");

                    b.Property<long?>("Long2")
                        .HasColumnType("bigint")
                        .HasColumnName("long2");

                    b.Property<long?>("Long3")
                        .HasColumnType("bigint")
                        .HasColumnName("long3");

                    b.Property<string>("String1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string1");

                    b.Property<string>("String2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string2");

                    b.Property<string>("String3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string3");

                    b.HasKey("Id");

                    b.ToTable("__stub_query_data", "__stub");
                });

            modelBuilder.Entity("Bki.Model.Data.Credit", b =>
                {
                    b.HasOne("Bki.Model.Data.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });
#pragma warning restore 612, 618
        }
    }
}
